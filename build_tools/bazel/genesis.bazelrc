###############################################################################
# Common flags that apply to all configurations.
# Use sparingly for things common to all compilers and platforms.
###############################################################################
# Prevent invalid caching if input files are modified during a build.
build --experimental_guard_against_concurrent_changes
# Default to optimized builds
# Override via: "-c dbg" or --compilation_mode=dbg
build --compilation_mode=opt
# C++17 standard version is required.
build --cxxopt=-std=c++17 --host_cxxopt=-std=c++17
# Default use gcc for deploy
build --config=gcc
# use local spawn strategy to avoid the presure of FS in ci
build --spawn_strategy=local
# Actually printing output on errors is... a useful default
test --test_output=errors

###############################################################################
# Options for "debug/release" builds
###############################################################################

build:debug -c dbg
build:debug --copt -O0 --copt -g
build:release -c opt
build:release --linkopt=-Wl,--strip-all

###############################################################################
# Options for "fastdebug" builds, used for better debug experience
###############################################################################

build:fastdebug --per_file_copt=external/llvm-project/llvm/.*@-g0
build:fastdebug --linkopt="-fuse-ld=gold"

###############################################################################
# Options for "gcc" builds
###############################################################################
build:gcc --copt=-Wno-comment
build:gcc --copt=-Wno-sign-compare

###############################################################################
# Options for "clang" builds: these options should generally apply to
# either clang or gcc and are curated based on need.
###############################################################################
build:clang --action_env CC=clang
build:clang --action_env CXX=clang++

# Treat warnings as errors...
build:clang --copt=-Werror --host_copt=-Werror
# ...and silence them outside of the workspace.
build:clang --per_file_copt=external/.*@-w
build:clang --copt=-Wno-comment
# ...and silence them on host builds. There is no host_per_file_copt and
# everything we build in the host configuration we either also build in the
# target configuration or is external, so we can't control it.
# If/when Bazel supports --host_per_file_copt, we could use that instead:
# https://github.com/bazelbuild/bazel/issues/12406.
# Would need to then make all the --copt below duplicated with --host_copt.
build:clang --host_copt=-w

# Set clang diagnostics. These largely match the set of warnings used within
# Google. They have not been audited super carefully by the fc team but are
# generally thought to be a good set and consistency with those used internally
# is very useful when importing. If you feel that some of these should be
# different, please raise an issue!
build:clang --copt=-Wall

###############################################################################
# Options for building with address sanitizer.
# https://github.com/google/sanitizers/wiki/AddressSanitizer
###############################################################################

# ASAN (address sanitizer)
# https://clang.llvm.org/docs/AddressSanitizer.html
build:asan --config=sanitizer
build:asan --features=asan
build:asan --copt=-fsanitize=address
build:asan --copt=-fsanitize-address-use-after-scope
build:asan --linkopt=-fsanitize=address
build:asan --copt=-DADDRESS_SANITIZER

# MSAN (memory sanitizer)
# https://clang.llvm.org/docs/MemorySanitizer.html
build:msan --config=sanitizer
build:msan --features=msan
build:msan --copt=-fsanitize=memory
build:msan --copt=-fsanitize-memory-track-origins
build:msan --linkopt=-fsanitize=memory
build:msan --cc_output_directory_tag=msan
build:msan --copt=-DMEMORY_SANITIZER

# TSAN (thread sanitizer)
# https://clang.llvm.org/docs/ThreadSanitizer.html
build:tsan --config=sanitizer
build:tsan --features=tsan
build:tsan --copt=-fsanitize=thread
build:tsan --linkopt=-fsanitize=thread
build:tsan --cc_output_directory_tag=tsan
build:tsan --copt=-DTHREAD_SANITIZER

# UBSAN (undefined behavior sanitizer)
# https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
build:ubsan --config=sanitizer
build:ubsan --features=ubsan
build:ubsan --copt=-fsanitize=undefined
build:ubsan --linkopt=-fsanitize=undefined
build:ubsan --linkopt=-lubsan
build:ubsan --cc_output_directory_tag=ubsan
# bazel use clang instead of clang++ as c++ linker, it may cause link error, use following option to workaround
# See https://github.com/bazelbuild/bazel/issues/11122 for detail
build:ubsan --linkopt -fsanitize-link-c++-runtime

# Don't strip debug info
build:sanitizer --strip=never
# Ignore settings of `linkopts = ["-static"]` which can screw up the sanitizer.
# We don't use this in fc (that's what linkstatic is for), but it could show
# up in dependencies.
build:sanitizer --force_ignore_dash_static
# sanitizer tests tend to take longer, so increase the timeouts
build:sanitizer --test_timeout=120,600,1800,-1
# Get better stack traces
build:sanitizer --copt=-fno-omit-frame-pointer

###############################################################################
# Configuration for caching remotely using Remote Build Execution (RBE)
# https://cloud.google.com/remote-build-execution/
# Based on https://github.com/bazelbuild/bazel-toolchains/blob/master/bazelrc/bazel-1.0.0.bazelrc
# Writing to the remote cache is limited to the CI to ensure a stable
# environment. Reading from the remote cache building in a place other than the
# CI is at your own risk. To do so pass `--noremote_upload_local_results` in
# addition to the config for the appropriate cache.
# We gave up on remote execution due to the amount of toolchain configuration
# required.
###############################################################################

# bazel fetch local dir
build --distdir=/data/fetch_data
# bazel remote cache config
build --remote_cache=http://10.100.99.31:30505
